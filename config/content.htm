<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-FANG436">https://github.com/mdecp2024/hw-FANG436</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-FANG436/content/index.html">https://mdecp2024.github.io/hw-FANG436/content/index.htmll</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">分享X。</span></span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QSD0tT5VHgM" width="560"></iframe></p>
<h3>w10</h3>
<p>題目1:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Pp4J-sTfo00" width="560"></iframe></p>
<p>題目2:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/H5afyiSMvaI" width="560"></iframe></p>
<h3>w11_hw</h3>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><a href="https://mdecp2024.github.io/hw-FANG436/content/Brython.html?src=https://gist.githubusercontent.com/FANG436/f66548d89d21cd65b2a47927a34d1b72/raw/f0b8526076b7b2de6f7700aa39850d0e4906e65c/w11_hw">圓形</a></p>
<p><a href="https://mdecp2024.github.io/hw-FANG436/content/Brython.html?src=https://gist.githubusercontent.com/FANG436/8111f1c9b6676ceb13e9df95d6a896c1/raw/52afea7929604d2ed6a214029dde926ba9495509/w11_hw-2">像素圓型</a></p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
# 從 browser 模組導入 html
from browser import html
# 從 browser 導入 document 並且重新命名為 doc
from browser import document as doc
 
# 建立 canvas
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas
 
# 設定每格的大小
gs = 20  # 每格 20x20 像素
ctx = canvas.getContext("2d")
 
# 定義矩形框繪製函數
def dRect(lux, luy, w, h, s=1, c="lightgrey"):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()
 
# 繪製網格
def grid(width, height, grid_pix):
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix)
 
# 填充顏色
def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x * gs, y * gs, gs, gs)
 
# 在網格中圍出圓形區域
def draw_circle_border(cx, cy, radius):
    for i in range(10):  # x 方向格數
        for j in range(10):  # y 方向格數
            # 計算該格的中心座標
            center_x = i + 0.5
            center_y = j + 0.5
            # 判斷中心點是否在圓周附近
            distance = ((center_x - cx) ** 2 + (center_y - cy) ** 2) ** 0.5
            if abs(distance - radius) <= 0.5:  # 設定容忍度
                fill(i, j, "black")  # 填充黑色
 
# 主程式
grid(10, 10, gs)  # 繪製 10x10 的網格
draw_circle_border(5, 5, 3)  # 在網格中心 (5, 5) 圍出半徑為 3 的圓
</script>
</p>
<p><br/><br/></p>
<h3>w12_hw</h3>
<p><br/><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/e-nV8FsArK8" width="560"></iframe><a href="https://mdecp2024.github.io/hw-FANG436/content/Brython.html?src=https://gist.githubusercontent.com/FANG436/a1769a5e4481b957329aad9e3082d201/raw/e6d86a185f742ccec68fa6ef19d984aad53acb03/W12">print和for迴圈做10個程式</a></p>
<p>要chatGPT幫我用print和for迴圈做10個程式後，再到Brython和Jupyter lab執行。</p>
<p>Ai會使的人類更加懶散，不知不覺就會把遇到的問題丟給Ai處理。</p>
<p></p>
<h3>w13_hw</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/IGE6VIpEDAU" title="w13" width="657"></iframe></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 導入 brython 程式庫 --></p>
<p>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<div><strong></strong></div>
<div><strong>建立畫布</strong></div>
<div>
<ul>
<li>html.CANVAS(width=500, height=500): 建立一個 500x500 像素的 HTML 畫布。</li>
<li>brython_div = doc["brython_div1"]: 將畫布加到 HTML 中一個 ID 為 brython_div1 的容器。</li>
<li>brython_div &lt;= canvas: 把畫布元素添加到容器中。</li>
<li>return canvas: 返回建立的畫布對象。</li>
</ul>
<p><strong>畫圖函式</strong></p>
<ul>
<li><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx = canvas.getContext("2d")</code>: 獲取 2D 繪圖上下文，用於畫圖。</li>
<li><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.lineWidth = 4</code>: 設定線條寬度為 4。</li>
</ul>
<p><strong>混合模式</strong></p>
<ul>
<li><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.globalCompositeOperation = "screen"</code>: 設定混合模式為<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">screen</code>，用於實現顏色混合效果。</li>
</ul>
<p><strong>繪製第一個圓形</strong></p>
<ul>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.strokeStyle = 'black'</code>: 設定圓形邊框顏色為黑色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">定義<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">colors1</code><span> </span>和<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">angles1</code>，分別表示每個圓弧的顏色和起止角度。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">for i in range(4):</code>: 繪製四段圓弧。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.arc(160, 160, 141, angles1[i][0], angles1[i][1])</code>: 繪製圓弧，圓心在<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">(160, 160)</code>，半徑為 141。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.fillStyle = colors1[i]</code>: 設定填充顏色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.fill()</code>: 填充圓弧內部。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.stroke()</code>: 描繪圓弧邊框。<strong></strong></li>
</ul>
<p><strong>繪製第二個圓形</strong></p>
<ul>
<li>與第一個圓相同，繪製第二個圓，但位置為<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">(260, 260)</code>，並使用<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">colors2</code><span> </span>和<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">angles2</code><span> </span>定義的顏色與角度。</li>
</ul>
<p><strong>繪製第一個方形中的三角形</strong></p>
<p><strong></strong></p>
<ul>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">設定邊框顏色為紅色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">使用<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">coords1</code><span> </span>定義第一個方形內的兩個三角形頂點與填充顏色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.moveTo(*coord[0])</code>: 移動畫筆到三角形的第一個頂點。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.lineTo(*coord[1])</code><span> </span>和<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.lineTo(*coord[2])</code>: 繪製兩條邊。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.fillStyle = coord[3]</code>: 設定三角形填充顏色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.fill()</code><span> </span>和<span> </span><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.stroke()</code>: 填充與描邊。</li>
</ul>
</div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math
 
# 創建畫布
def create_canvas():
    # 創建一個500x500像素的畫布
    canvas = html.CANVAS(width=500, height=500)
    # 獲取ID為"brython_div1"的容器
    brython_div = doc["brython_div1"]
    # 將畫布添加到容器中
    brython_div <= canvas
    return canvas

# 在畫布上繪圖
def draw_shapes(canvas):
    # 獲取2D繪圖上下文
    ctx = canvas.getContext("2d")
    # 設置所有圖形的線條寬度
    ctx.lineWidth = 4

    # 設置混合模式為"screen"，用於顏色混合
    ctx.globalCompositeOperation = "screen"

    # 黑色邊框的圓形（每個有四個部分）
    ctx.strokeStyle = 'black'

    # 第一個圓形
    colors1 = ["Turquoise", "Tomato", "SpringGreen", "FloralWhite"]
    angles1 = [
        (0.25 * math.pi, 0.75 * math.pi),  # 第1部分
        (0.75 * math.pi, 1.25 * math.pi),  # 第2部分
        (1.25 * math.pi, 1.75 * math.pi),  # 第3部分
        (1.75 * math.pi, 0.25 * math.pi),  # 第4部分
    ]

    for i in range(4):
        # 繪製第一個圓形的每個部分
        ctx.beginPath()
        ctx.arc(160, 160, 141, angles1[i][0], angles1[i][1])
        ctx.fillStyle = colors1[i]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪部分的邊框

    # 第二個圓形
    colors2 = ["Purple", "OliveDrab", "Orange", "MediumVioletRed"]
    angles2 = [
        (1.25 * math.pi, 1.75 * math.pi),  # 第1部分
        (1.75 * math.pi, 0.25 * math.pi),  # 第2部分
        (0.25 * math.pi, 0.75 * math.pi),  # 第3部分
        (0.75 * math.pi, 1.25 * math.pi),  # 第4部分
    ]

    for i in range(4):
        # 繪製第二個圓形的每個部分
        ctx.beginPath()
        ctx.arc(260, 260, 141, angles2[i][0], angles2[i][1])
        ctx.fillStyle = colors2[i]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪部分的邊框

    # 兩個方形中的紅色三角形
    ctx.strokeStyle = 'red'

    # 第一個方形
    coords1 = [
        ((60, 60), (60, 260), (260, 260), "Gold"),  # 第一個三角形
        ((60, 60), (260, 60), (260, 260), "Indigo"),  # 第二個三角形
    ]

    for coord in coords1:
        # 繪製第一個方形中的每個三角形
        ctx.beginPath()
        ctx.moveTo(*coord[0])  # 移動到第一個頂點
        ctx.lineTo(*coord[1])  # 繪製到第二個頂點
        ctx.lineTo(*coord[2])  # 繪製到第三個頂點
        ctx.fillStyle = coord[3]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪三角形的邊框

    # 第二個方形
    coords2 = [
        ((160, 160), (360, 160), (360, 360), "Cyan"),  # 第一個三角形
        ((160, 160), (160, 360), (360, 360), "SpringGreen"),  # 第二個三角形
    ]

    for coord in coords2:
        # 繪製第二個方形中的每個三角形
        ctx.beginPath()
        ctx.moveTo(*coord[0])  # 移動到第一個頂點
        ctx.lineTo(*coord[1])  # 繪製到第二個頂點
        ctx.lineTo(*coord[2])  # 繪製到第三個頂點
        ctx.fillStyle = coord[3]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪三角形的邊框

    # 重疊的小方形
    coords3 = [
        ((160, 160), (160, 260), (260, 260), "Turquoise"),  # 第一個三角形
        ((160, 160), (260, 160), (260, 260), "SlateBlue"),  # 第二個三角形
    ]

    for coord in coords3:
        # 繪製小方形中的每個三角形
        ctx.beginPath()
        ctx.moveTo(*coord[0])  # 移動到第一個頂點
        ctx.lineTo(*coord[1])  # 繪製到第二個頂點
        ctx.lineTo(*coord[2])  # 繪製到第三個頂點
        ctx.fillStyle = coord[3]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪三角形的邊框

    # 藍色對角線
    ctx.strokeStyle = 'blue'
    ctx.beginPath()
    ctx.moveTo(60, 60)  # 線條的起點
    ctx.lineTo(260, 260)  # 線條的終點
    ctx.stroke()

# 主執行部分
canvas = create_canvas()  # 創建畫布
draw_shapes(canvas)  # 繪製所有圖形
</script>
</p>
<h3>w15</h3>
<p>題目1</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum_result = 0 #建立變數sum_result
i = 1 #指定i等於1
while i &lt;= 100: #使用while迴圈把i加到等於100
sum_result += i
i += 1
print(sum_result)</pre>
<p><a href="https://mdecp2024.github.io/hw-FANG436/content/Brython.html?src=https://gist.githubusercontent.com/FANG436/c5a83e1750ca3d7fea0bb977a0e0e549/raw/fb74863e606f186a57687605730ce85c19a81dbd/w15">從 1 累加到 100</a><br/><br/></p>
<p>說明:</p>
<p></p>
<ul>
<li><strong><code>sum_result = 0</code></strong>：這是用來存放累加結果的變數，初始為 0。</li>
<li><strong><code>i = 1</code></strong>：這是計數器，從 1 開始。</li>
<li><strong><code>while i &lt;= 100:</code></strong>：這個 <code>while</code> 迴圈會一直執行，直到 <code>i</code> 大於 100 為止。</li>
<li><strong><code>sum_result += i</code></strong>：將當前的 <code>i</code> 值加到 <code>sum_result</code> 上。</li>
<li><strong><code>i += 1</code></strong>：每次迴圈執行時，<code>i</code> 會增加 1。</li>
<li><strong><code>print(sum_result)</code></strong>：最後將累加結果輸出。</li>
</ul>
<p></p>
<p>題目2</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    sum_result = 0  # 初始化累加結果
    i = start  # 設定 i 為開始值
    while i &lt;= end:  # 使用 while 迴圈直到 i 超過結束值
        sum_result += i  # 將 i 加到 sum_result 中
        i += 1  # i 每次增加 1
    return sum_result  # 返回最終的累加結果

# 呼叫 addto 函式，傳入 1 和 100，並印出結果
result = addto(1, 100)
print(result)
</pre>
<p><a href="https://mdecp2024.github.io/hw-FANG436/content/Brython.html?src=https://gist.githubusercontent.com/FANG436/6cca2ea080ffeb81e81c6cd6a765ba8a/raw/c71fa7d7b85acd643ec2058c11d979e23e0903c0/w15-2">addto</a></p>
<p><span>說明:</span></p>
<p><span></span></p>
<ul>
<li><strong><code>def addto(start, end):</code></strong>：這是函式的定義，<code>start</code> 是起始數字，<code>end</code> 是結束數字。</li>
<li><strong><code>sum_result = 0</code></strong>：初始化累加變數 <code>sum_result</code>，從 0 開始。</li>
<li><strong><code>i = start</code></strong>：設定計數器 <code>i</code> 為起始數字。</li>
<li><strong><code>while i &lt;= end:</code></strong>：<code>while</code> 迴圈會持續執行，直到 <code>i</code> 大於結束值 <code>end</code>。</li>
<li><strong><code>sum_result += i</code></strong>：將當前的 <code>i</code> 值加到 <code>sum_result</code> 中。</li>
<li><strong><code>i += 1</code></strong>：每次迴圈執行時，<code>i</code> 增加 1。</li>
<li><strong><code>return sum_result</code></strong>：當迴圈結束後，返回累加的結果。</li>
</ul>
<p></p>
<p>題目3</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(start, end):
    sum_result = 0  # 初始化累加結果
    for i in range(start, end + 1):  # 使用 for 迴圈從 start 到 end (包含 end)
        if i % 2 == 0:  # 如果 i 是偶數
            sum_result += i  # 將偶數加到 sum_result 中
    return sum_result  # 返回最終的累加結果

# 呼叫 add_only_even 函式，傳入 1 和 100，並印出結果
result = add_only_even(1, 100)
print(result)
</pre>
<p><a href="https://mdecp2024.github.io/hw-FANG436/content/Brython.html?src=https://gist.githubusercontent.com/FANG436/ea325ea234245fefde3a46fd393f6d76/raw/ed917348d8528c635ab4063a11d3a632802a85bc/w15-3">add_only_even</a></p>
<p><span>說明:</span></p>
<p><span></span></p>
<ul>
<li><strong><code>def add_only_even(start, end):</code></strong>：這是函式定義，<code>start</code> 和 <code>end</code> 參數是範圍的開始和結束值。</li>
<li><strong><code>sum_result = 0</code></strong>：初始化一個變數 <code>sum_result</code>，用來累加符合條件的數字（偶數）。</li>
<li><strong><code>for i in range(start, end + 1):</code></strong>：這個 <code>for</code> 迴圈會遍歷從 <code>start</code> 到 <code>end</code>（包括 <code>end</code>）之間的所有數字。</li>
<li><strong><code>if i % 2 == 0:</code></strong>：這是條件判斷式，用來檢查當前的數字 <code>i</code> 是否是偶數。如果 <code>i</code> 除以 2 的餘數為 0，就代表它是偶數。</li>
<li><strong><code>sum_result += i</code></strong>：如果 <code>i</code> 是偶數，就將它加到 <code>sum_result</code> 變數中。</li>
<li><strong><code>return sum_result</code></strong>：當迴圈結束後，返回累加的結果。</li>
</ul>
<p>題目4</p>
<p></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p>題目: 請以自己的學號最後四碼作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像 (圖片來源).</p>
<p><a href="https://mdecp2024.github.io/hw-FANG436/content/Brython.html?src=https://gist.githubusercontent.com/FANG436/d42969d48876bd6b75bdafa39307ddd2/raw/7d0c6d9dc03a525704e6838fd9e190467f168c0c/w16_exam1.py">anchor</a></p>
<p style="text-align: left;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YofU5F4sDmU" width="560"></iframe></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

from browser import document, html
import math
  
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document <= canvas
  
setup_canvas()
 
# Set up canvas
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")
 
# Set origin (31, 29)
origin_x, origin_y = 31, 29    #自己學號 修改
 
# Draw X-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(500, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()
 
# Draw Y-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 300)
ctx.stroke()
 
# Label origin
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(31, 29)", origin_x + 5, origin_y - 5)
 
# Draw shapes
# Adjusted placement to fix alignment issue
 
# Hexagon (Orange)
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()
 
# Diamond (Teal)
ctx.beginPath()
ctx.moveTo(160, 70)
ctx.lineTo(180, 100)
ctx.lineTo(160, 130)
ctx.lineTo(140, 100)
ctx.closePath()
ctx.fillStyle = "teal"
ctx.fill()
 
# Triangle (Teal)
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()
 
# Circle (Pink)
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()
 
# Square (Yellow)
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "yellow"
ctx.fill()
 
# Rectangle (Blue)
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "Blue"
ctx.fill()
</script>
</p><h3>w16_exam2</h3>
<p><span>題目一: 請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</span></p>
<p><a href="https://mdecp2024.github.io/hw-FANG436/content/Brython.html?src=https://gist.githubusercontent.com/FANG436/a7906e1a5b8fe5f5e3247ae9efeda05b/raw/7b8bcef73a224ca5a215d332aa79e593692d39bb/w16_exam2.py">w16_exam2</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jMTYWSiJy7c" width="560"></iframe></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

from browser import html
from browser import document as doc

# Create the canvas
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython_div1"]
brython_div <= canvas

# Get the drawing context
ctx = canvas.getContext("2d")

# Mark the start point (31, 29)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 29)", 35, 50)

# Set line properties
ctx.strokeStyle = "blue"
ctx.lineWidth = 3

# Offset for maze starting point
offset_x = 31
offset_y = 29

# Draw maze walls
ctx.beginPath()
ctx.moveTo(offset_x + 0, offset_y + 0)
ctx.lineTo(offset_x + 86, offset_y + 0)
ctx.moveTo(offset_x + 0, offset_y + 0)
ctx.lineTo(offset_x + 0, offset_y + 200)
ctx.moveTo(offset_x + 120, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 0)
ctx.moveTo(offset_x + 200, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 200)
ctx.moveTo(offset_x + 0, offset_y + 200)
ctx.lineTo(offset_x + 100, offset_y + 200)  # First part of bottom boundary
ctx.moveTo(offset_x + 150, offset_y + 200)  # Gap
ctx.lineTo(offset_x + 200, offset_y + 200)  # Second part of bottom boundary
ctx.moveTo(offset_x + 86, offset_y + 157)
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157)
ctx.lineTo(offset_x + 126, offset_y + 157)
ctx.moveTo(offset_x + 160, offset_y + 120)
ctx.lineTo(offset_x + 160, offset_y + 200)
ctx.moveTo(offset_x + 160, offset_y + 120)
ctx.lineTo(offset_x + 50, offset_y + 120)
ctx.moveTo(offset_x + 50, offset_y + 120)
ctx.lineTo(offset_x + 50, offset_y + 163)
ctx.moveTo(offset_x + 126, offset_y + 80)
ctx.lineTo(offset_x + 126, offset_y + 120)
ctx.moveTo(offset_x + 0, offset_y + 80)
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 86, offset_y + 40)
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 40, offset_y + 40)
ctx.lineTo(offset_x + 160, offset_y + 40)
ctx.moveTo(offset_x + 160, offset_y + 40)
ctx.lineTo(offset_x + 160, offset_y + 83)
ctx.moveTo(offset_x + 200, offset_y + 20)
ctx.lineTo(offset_x + 200, offset_y + 60)  # Draw only part of the wall, leaving a gap in the middle
ctx.stroke()
</script>
</p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5LCsCyQD0bo" width="560"></iframe></p>
<p>期末書面專題報告檔案 (pdf):</p>
<p><a href="/downloads/計算機.pdf">期末PDF</a></p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p>十分耗費頭腦、精力和時間的一門課程，原本理所當然的認為只要會上網查資料就行了，程式碼什麼不重要<span>、</span>不關我的事，但接觸程式碼後，我開始尊敬起那些設計程式的開發人員，實在是很偉大，沒有你們的話我的生活就不會如此方便。</p>
<p>期末報告自評成績:68</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<!-- editor2 結束 -->
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>